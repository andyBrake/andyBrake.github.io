/*
http://www.ruanyifeng.com/blog/2013/05/boyer-moore_string_search_algorithm.html
BM
BM算法的预处理时间是O(m+ASIZE)
匹配时间最差是O(mn),引用论文的例子 (e.g. pattern = "CABABA," and string = "XXXXAABABAXXXXAABABA
..."). 可以看出每次最多只能移动2步，也就是运算（n-m）/2*（m-2）也就是O（mn）
最好的情况是 pattern:am-1b ,string:bn,(n-m)/m,也就是O（n/m）
对于无周期的模式串，时间复杂度不超过3n。
KMP
KMP的预处理时间是O(m)
匹配时间是比较稳定的是O(n)，证明如下：

循环体中”j = N[j];” 语句的执行次数不能超过 n 次。否则，由于“j = N[j]; ”
每执行一次必然使得j减少(至少减1)而使得 j 增加的操作只有“j++ ”那么，如果“j = N[j]; ”的执行次数超过n次，最终的结果必然
使得 j 为比-1小很多的负数。这是不可能的(j有时为-1,但是 很快+1回到0)。

实际应用中BM算法往往效率更高，

作者：tcfellow
链接：https://juejin.im/post/5b41d589f265da0fa9599918
来源：掘金
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。


*/

#include <iostream>
#include <string>
#include <algorithm>
using namespace std;


//这里我们只使用ASCII的128个字符，中文处理不了
#define ASIZE 128
void preBmBc(char *x, int m, int bmBc[]) {
   int i;
 
   for (i = 0; i < ASIZE; ++i)
      bmBc[i] = m;
   for (i = 0; i < m - 1; ++i)
      bmBc[x[i]] = m - i - 1;
}

void suffixes(char *x, int m, int *suff) {
   int f, g, i;
 
   suff[m - 1] = m;
   g = m - 1;
   for (i = m - 2; i >= 0; --i) {
   	//如果某一后缀段包含在其中一个大后缀段，那么大后缀段子集 与与之对应的前面匹配的后缀的子集必然是相等的
      if (i > g && suff[i + m - 1 - f] < i - g)
         suff[i] = suff[i + m - 1 - f];
      else {
         if (i < g)
            g = i;
         f = i;
         while (g >= 0 && x[g] == x[g + m - 1 - f])
            --g;
         suff[i] = f - g;
      }
   }
}
 
void preBmGs(char *x, int m, int bmGs[]) {
   int i, j, suff[m];
 
   suffixes(x, m, suff);
 	//case1:不存在好后缀，直接移动模式串长度，与j所处位置无关
   for (i = 0; i < m; ++i)
      bmGs[i] = m;
   j = 0;
   //case2:存在好后缀，且好后缀是前缀，中间段任何j都移动，m - 1 - i，可以看出是与j无关的
   for (i = m - 1; i >= 0; --i)
      if (suff[i] == i + 1) //长度比i多1，说明是前缀
         for (; j < m - 1 - i; ++j)
            if (bmGs[j] == m) //多个前缀可能重复
               bmGs[j] = m - 1 - i;
    //case3:存在好后缀，且不是前缀，m - 1 - j，可以看出与j所处的位置有关
    //这里的移动距离会覆盖上面的两种，因为这个是移动最小的，并且不会重复
   for (j = 0; j <= m - 2; ++j)
      bmGs[m - 1 - suff[j]] = m - 1 - j;
}

void OUTPUT(int pos){
	cout<<pos<<endl;
}

//x模式串，m模式串长度，y目标串，n目标串长度
void BM(char *x,int m, char *y,int n){
	if(m>n){
		return OUTPUT(-1);
	}
	int i;//模式串位置
	int j=0; //目标串位置
	int total = 0; //找到了几个
	int bmGs[m];//坏字符集
	int bmBc[ASIZE];//好后缀
	/**预处理**/
	preBmGs(x,m,bmGs);
	preBmBc(x,m,bmBc);

	while(j<=n-m){
		for(i=m-1;i>=0&& x[i]== y[i+j];i--);
		if(i<0) //找到了一个结果
		{
			total++;
			OUTPUT(j);
			j+=bmGs[0]; //跨国匹配的字符接着匹配
		} else {
			//移动最多的
			j+=max(bmGs[i],bmBc[y[i+j]]+i-m+1);
		}
	}
	printf("共找到%d\n个", total);
}


/×
假定字符串为"HERE IS A SIMPLE EXAMPLE"，搜索词为"EXAMPLE"
×/
int main(){
	string targetStr = "BMBBMB";
	string patternStr = "BMB";
	int m = patternStr.length();
	int n = targetStr.length();
	char *x = (char *)patternStr.c_str();
	char *y = (char *)targetStr.c_str();
	BM(x,m,y,n);
	return 0;
};
