一个ring buffer诡异问题引出的MEM Barrier讨论

#问题背景：
在multi core系统下，实现了一个ring buffer，经典的无锁ring buffer实现，理论上应该可以实现无锁的PUSH，POP操作。但是，在实际系统上一测试，发现压力稍微一大，就会出现各种诡异问题，比如读出的数据完全是乱码，或者读出的数据是已经被读过的老数据。

#初步的怀疑:
1. 代码逻辑问题，但是压力小的时候没有问题，而且代码实现是经典的代码，不会存在低级bug
2. 硬件问题，这类问题很难确认
3. 最后参考linux kernel的实现，发现有调用mem barrier的代码，于是发现我们系统上也需要去进行相应处理

#mem barrier讨论
可以参考 https://blog.csdn.net/zhangxiao93/article/details/42966279
barrier就象是c代码中的一个栅栏，将代码逻辑分成两段，barrier之前的代码和barrier之后的代码在经过编译器编译后顺序不能乱掉。也就是说，barrier之后的c代码对应的汇编，不能跑到barrier之前去，反之亦然。
在单核系统中，mem barrier定义为空，因为单核系统中不需要内存屏障。

为什么内存屏障对ring buffer会有影响？因为内存屏障保证了内存的访问顺序，而ring buffer的核心要求就是要求内存访问有序，具体如下：
ring buffer无锁的核心思想，是对于tail,head 游标而言，肯定只有一端写它。不会出现两端同时写同一个游标的情况。同时，读写游标和读写buffer中的数据，有严格的顺序限制。
对于生产者来说，只会读写tail，读head，首先需要读head和tail的值，判断buffer是否满，如果不满，则会先写入数据到buffer中，再给tail加1.
对于消费者来说，首先需要读head和tail的值，判断buffer是否空，如果不空，则会先读出buffer中的数据，再给head减1.
整个过程中，对于head，tail的指针不会同时有生产者和消费者去写他们，但是可能同时读他们。而对于读而言，是不需要锁保护的，分析如下：对于生产者来说，tail只可能自己改，所以读到的一定是最新数据，head可能被消费者修改。假设，生产者读到的是最新数据，那么说明buffer中一定被读出数据了（说明可以覆盖他），这时生产者写入数据到buffer不会覆盖未被读出的数据；假如生产者读出的不是最新数据，那么肯定不会去覆盖未被读出数据，因为head游标一定是在buffer中数据被读出之后修改的。同样的道理对于消费者而言，也是不需要锁即可保证数据一致性的，这里无锁的前提就是前面提到的两点：
1. tail和head一定只可能被一个对象写，可以被两个对象读
2. tail和head的修改一定和buffer中数据的读写有严格先后顺序的。

在内存访问不保序的时候会有什么问题？
加入内存访问不保序，对于生产者，就可能先访问了buffer，将数据拷贝到了buffer中再去判断，修改tail指针。那么就可能覆盖buffer中未使用的数据。

#总线问题
在引入内存屏障之后，加大测试压力，时间一长问题依然存在。
问题的根因在于ring buffer的关键管理信息(tail, head pointer)存放在share TCM中，ring buffer的buffer放在sram中，而CPU访问的TCM的时候有两条总线，一条总线和访问sram一样，需要经过memroy bus controller的仲裁；而另一条是TCM的专用访问总线，不经过memory bus controller的仲裁。所以，当CPU通过TCM专用总线访问TCM中的数据时是不会受任何互斥机制控制的，于是ring buffer的关键管理信息可能会被错误地乱序修改。

